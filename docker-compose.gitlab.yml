services:
  web1:
    build: ./django
    image: aoieu
    environment:
      - SECRET_KEY
      - DEBUG
      - DJANGO_ALLOWED_HOSTS
      - DJANGO_SUPERUSER_USERNAME
      - DJANGO_SUPERUSER_PASSWORD
      - DJANGO_SUPERUSER_EMAIL
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_HOST
      - POSTGRES_PORT
      - CSRF_TRUSTED_ORIGINS
    command: gunicorn kadmin.wsgi:application --bind 0.0.0.0:8001
    volumes:
      - ./django:/app/
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    expose:
      - 8001
    depends_on:
      - migration
      - db
  web2:
    build: ./django
    image: aoieu
    environment:
      - SECRET_KEY
      - DEBUG
      - DJANGO_ALLOWED_HOSTS
      - DJANGO_SUPERUSER_USERNAME
      - DJANGO_SUPERUSER_PASSWORD
      - DJANGO_SUPERUSER_EMAIL
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_HOST
      - POSTGRES_PORT
      - CSRF_TRUSTED_ORIGINS
    command: gunicorn kadmin.wsgi:application --bind 0.0.0.0:8002
    volumes:
      - ./django:/app/
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    expose:
      - 8002
    depends_on:
      - migration
      - db
  
  migration:
    image: aoieu
    environment:
      - SECRET_KEY
      - DEBUG
      - DJANGO_ALLOWED_HOSTS
      - DJANGO_SUPERUSER_USERNAME
      - DJANGO_SUPERUSER_PASSWORD
      - DJANGO_SUPERUSER_EMAIL
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_HOST
      - POSTGRES_PORT
      - CSRF_TRUSTED_ORIGINS
    command: bash -c "python manage.py makemigrations && python manage.py migrate && python manage.py createsuperuser --noinput && python manage.py collectstatic --noinput"
    volumes:
      - ./django:/app/
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    depends_on:
      - db

  db:
    image: postgres:latest
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  nginx1:
    build: ./nginx1
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    expose:
      - 81
    depends_on:
      - web1

  nginx2:
    build: ./nginx2
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    expose:
      - 82
    depends_on:
      - web2

  haproxy:
    build: ./haproxy
    ports:
     - '80:80'
     - '443:443'
    depends_on:
      - nginx1
      - nginx2


volumes:
  postgres_data:
  static_volume:
  media_volume: